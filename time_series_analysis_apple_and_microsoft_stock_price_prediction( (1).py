# -*- coding: utf-8 -*-
"""Time series Analysis -Apple and  Microsoft Stock Price Prediction(.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xISrFgCD0gzGDVAHrp10Lnxj9Or9em79
"""

# Commented out IPython magic to ensure Python compatibility.
#Import the necessary library
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
plt.style.use("fivethirtyeight")
# %matplotlib inline

# For reading stock data from yahoo
from pandas_datareader.data import DataReader
import yfinance as yf
from pandas_datareader import data as pdr

yf.pdr_override()

# For time stamps
from datetime import datetime

# The tech stocks will be  used for this analysis
tech_list = ['AAPL','MSFT']

# Set up End and Start times for data grab
tech_list = ['AAPL', 'MSFT']

end = datetime.now()
start = datetime(end.year - 1, end.month, end.day)

for stock in tech_list:
    globals()[stock] = yf.download(stock, start, end)

##Globals is a sloppy way of seeting the Dataframe names

company_list = [AAPL, MSFT]
company_name = ["APPLE", "MICROSOFT"]

for company, com_name in zip(company_list, company_name):
    company["company_name"] = com_name

df = pd.concat(company_list, axis=0)
df.tail(10)

"""The date is the index of the data  and the content of the data is numeric. Also weekennds are missing from the records."""

#Descriptive Statistics about the Data
# Summary Statistics
AAPL.describe()

MSFT.describe()

#General info
AAPL.info()

MSFT.info()

# Historical view of the closing price
plt.figure(figsize=(15, 10))
plt.subplots_adjust(top=1.25, bottom=1.2)

for i, company in enumerate(company_list, 1):
    plt.subplot(2, 2, i)
    company['Adj Close'].plot()
    plt.ylabel('Adj Close')
    plt.xlabel(None)
    plt.title(f"Closing Price of {tech_list[i - 1]}")
plt.tight_layout()

#Volume of Sales traded each day
# The total volume of stock being traded each day
plt.figure(figsize=(15, 10))
plt.subplots_adjust(top=1.25, bottom=1.2)

for i, company in enumerate(company_list, 1):
    plt.subplot(2, 2, i)
    company['Volume'].plot()
    plt.ylabel('Volume')
    plt.xlabel(None)
    plt.title(f"Sales Volume for {tech_list[i - 1]}")

plt.tight_layout()

##The moving average of each stock-This is the average price of a stock over a specific period of time.
ma_day = [10, 20, 60]
def calculate_moving_averages(company, ma_day):
    for ma in ma_day:
        column_name = f"MA for {ma} days"
        company[column_name] = company['Adj Close'].rolling(ma).mean()

def plot_stock_data(company, title):
    fig, ax = plt.subplots(figsize=(10, 5))
    company[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 60 days']].plot(ax=ax)
    ax.set_title(title)
    plt.tight_layout()
    plt.show()

# The two company dataframes named AAPL and MSFT
calculate_moving_averages(AAPL, [10, 20, 60])
plot_stock_data(AAPL, 'APPLE')

calculate_moving_averages(MSFT, [10, 20, 60])
plot_stock_data(MSFT, 'MICROSOFT')

"""The moving average of each price stock values are 10 to 20days because it shows that the trend in data were captured without noise."""

# Correlation between the two stock price
#The closing prices for the tech stock list into one DataFrame
closing_df = pdr.get_data_yahoo(tech_list, start=start, end=end)['Adj Close']

# Make a new tech returns DataFrame
tech_rets = closing_df.pct_change()
tech_rets.head()

plt.figure(figsize=(7, 5))
sns.heatmap(closing_df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation of stock closing price',size=12)

"""## Predicting the closing stock price of APPLE INC and MSFT using LONG SHORT TERM MEMORY (LSTM)

#APPLE INC STOCK PRICE PREDICTION
"""

# Get the stock quote
df = pdr.get_data_yahoo('AAPL', start='2022-01-01', end=datetime.now())
# Show the data
df

plt.figure(figsize=(12,6))
plt.title('AAPL Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=15)
plt.ylabel('Close Price USD ($)', fontsize=15)
plt.show()

# Create a new dataframe with only the 'Close column
data = df.filter(['Close'])
# Convert the dataframe to a numpy array
dataset = data.values
# Get the number of rows to train the model on
training_data_len = int(np.ceil( len(dataset) * .95 ))

training_data_len

# Scale the data
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# Create the scaled training data set
train_data = scaled_data[0:int(training_data_len), :]

# Split the data into x_train and y_train data sets
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])
    if i<= 61:
        print(x_train)
        print(y_train)
        print()

# Convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#Model Building
from keras.models import Sequential
from keras.layers import Dense, LSTM

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Create the testing data set
# Create a new array containing scaled values from index 1543 to 2002
test_data = scaled_data[training_data_len - 60: , :]
# Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

# Convert the data to a numpy array
x_test = np.array(x_test)

# Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))

# Get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
rmse

# Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

# Visualize the data
plt.figure(figsize=(16,6))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

# Show the valid and predicted prices
valid

#Predicting the closing price for APPLE STOCK FOR 2023-09-06
#Get the Quote
stock_symbol = 'AAPL'
apple_quote = yf.download(stock_symbol, start='2022-01-01',end='2023-09-06')

#Create a new dataframe
new_df=apple_quote.filter(['Close'])

#Get the last 60days closing price values and convert the dataframe to an array
last_60_days =new_df[-60:].values

#Scale the data to be values betwwen 0 and 1
last_60_days_scaled =scaler.transform(last_60_days)

#Create an empty list
X_test =[]

#Append the past 60days
X_test.append(last_60_days_scaled)

#Convert the X_test data set to a numpy array
X_test =np.array(X_test)

#Reshape the data
X_test =np.reshape(X_test,(X_test.shape[0], X_test.shape[1], 1))

#Get the predicted scaled price
pred_price= model.predict(X_test)

#Undo the scaling
pred_price =scaler.inverse_transform(pred_price)
print(pred_price)

"""The model believes that the predicted price will be $184.347961 for 2023-09-06"""

#Getting the Actual stock price for 2023-09-06
#Get the quote
apple_quote2 =pdr.get_data_yahoo('AAPL', start='2023-09-06', end=datetime.now())
print (apple_quote2['Close'])

"""The  actual price for the APPL Stock for 2023-09-06 is $183.865005

#MICROSOFT STOCK PRICE PREDICTION
"""

# Get the stock quote
df2 = pdr.get_data_yahoo('MSFT', start='2022-01-01', end=datetime.now())
# Show the data
df2

plt.figure(figsize=(12,6))
plt.title('MSFT Close Price History')
plt.plot(df2['Close'])
plt.xlabel('Date', fontsize=15)
plt.ylabel('Close Price USD ($)', fontsize=15)
plt.show()

# Create a new dataframe with only the 'Close column
data = df2.filter(['Close'])
# Convert the dataframe to a numpy array
dataset = data.values
# Get the number of rows to train the model on
training_data_len = int(np.ceil( len(dataset) * .95 ))

training_data_len

# Scale the data
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# Create the scaled training data set
train_data = scaled_data[0:int(training_data_len), :]

# Split the data into x_train and y_train data sets
x_train2 = []
y_train2= []

for i in range(60, len(train_data)):
    x_train2.append(train_data[i-60:i, 0])
    y_train2.append(train_data[i, 0])
    if i<= 61:
        print(x_train2)
        print(y_train2)
        print()

# Convert the x_train and y_train to numpy arrays
x_train2, y_train2 = np.array(x_train2), np.array(y_train2)

# Reshape the data
x_train2 = np.reshape(x_train2, (x_train2.shape[0], x_train2.shape[1], 1))
x_train2.shape

#Model Building
from keras.models import Sequential
from keras.layers import Dense, LSTM

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train2.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train2, y_train2, batch_size=1, epochs=1)

# Create the testing data set
# Create a new array containing scaled values from index 1543 to 2002
test_data = scaled_data[training_data_len - 60: , :]
# Create the data sets x_test and y_test
x_test2 = []
y_test2 = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
    x_test2.append(test_data[i-60:i, 0])

# Convert the data to a numpy array
x_test2 = np.array(x_test2)

# Reshape the data
x_test2 = np.reshape(x_test2, (x_test2.shape[0], x_test2.shape[1], 1 ))

# Get the models predicted price values
predictions = model.predict(x_test2)
predictions = scaler.inverse_transform(predictions)

# Get the root mean squared error (RMSE)
rmse2 = np.sqrt(np.mean(((predictions - y_test2) ** 2)))
rmse2

# Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

# Visualize the data
plt.figure(figsize=(16,6))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

# Show the valid and predicted prices
valid

#Predicting the closing price for MFST STOCK FOR 2023-09-06
#Get the Quote
stock_symbol = 'MSFT'
msft_quote = yf.download(stock_symbol, start='2022-01-01',end='2023-09-06')

#Create a new dataframe
new_df2=msft_quote.filter(['Close'])

#Get the last 60days closing price values and convert the dataframe to an array
last_60_days =new_df2[-60:].values

#Scale the data to be values betwwen 0 and 1
last_60_days_scaled =scaler.transform(last_60_days)

#Create an empty list
X_test =[]

#Append the past 60days
X_test.append(last_60_days_scaled)

#Convert the X_test data set to a numpy array
X_test =np.array(X_test)

#Reshape the data
X_test =np.reshape(X_test,(X_test.shape[0], X_test.shape[1], 1))

#Get the predicted scaled price
pred_price= model.predict(X_test)

#Undo the scaling
pred_price =scaler.inverse_transform(pred_price)
print(pred_price)

"""The model believes that the predicted stock price for MFST on 2023-09-06 is $ 324.140871"""

#Getting the Actual Microsoft stock price for 2023-09-06
#Get the quote
msft_quote2 =pdr.get_data_yahoo('MSFT', start='2023-09-06', end=datetime.now())
print (msft_quote2['Close'])

"""The actual price of the stock is $331.940002 on 2023-09-06"""



